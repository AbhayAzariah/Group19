import requests

API_KEY = "gVaGW1IWY2gYQtinNU1z2aXQ5YxAfOM6175bQzmt"
BASE_URL = "https://api.data.gov/ed/collegescorecard/v1/schools"

def fetch_school_details(name):
    """
    Fetches detailed information about schools filtered by name.
    :param name: School name (partial or full).
    :return: List of schools matching the name with details.
    """
    params = {
        "api_key": API_KEY,
        "fields": "id,school.name,school.city,school.state,latest.admissions.admission_rate.overall,latest.cost.tuition.out_of_state,"
                  "latest.student.size"
    }
    params["school.name"] = name
    try:
        response = requests.get(BASE_URL, params=params)
        response.raise_for_status()
        data = response.json()
        return data.get("results", [])
    except requests.exceptions.RequestException as e:
        print(f"Error fetching data from the API: {e}")
        return []

def display_schools(schools):
    """Displays a list of schools with detailed information."""
    if not schools:
        print("No schools found.")
    else:
        print("\nMatching Schools:")
        for index, school in enumerate(schools, start=1):
            name = school.get("school.name", "N/A")
            location = f"{school.get('school.city', 'N/A')}, {school.get('school.state', 'N/A')}"
            acceptance_rate = school.get("latest.admissions.admission_rate.overall")
            cost = school.get("latest.cost.tuition.out_of_state", "N/A")
            size = school.get("latest.student.size", "N/A")

            # Handle None acceptance rate
            if acceptance_rate is not None:
                acceptance_rate = f"{acceptance_rate * 100:.2f}%"
            else:
                acceptance_rate = "N/A"

            print(f"{index}. {name}")
            print(f"   Location: {location}")
            print(f"   Acceptance Rate: {acceptance_rate}")
            print(f"   Cost (Out-of-State): ${cost:,} (if available)")
            print(f"   Student Body Size: {size}\n")

def add_to_comparison(comparison_index, school):
    """Adds a school to the comparison index."""
    comparison_index.append(school)
    print(f"Added {school['school.name']} to the comparison index.")

def display_comparison_index(comparison_index):
    """Displays the comparison index with detailed information."""
    if not comparison_index:
        print("The comparison index is empty.")
    else:
        print("\nComparison Index:")
        for school in comparison_index:
            name = school.get("school.name", "N/A")
            location = f"{school.get('school.city', 'N/A')}, {school.get('school.state', 'N/A')}"
            acceptance_rate = school.get("latest.admissions.admission_rate.overall")
            cost = school.get("latest.cost.tuition.out_of_state", "N/A")
            size = school.get("latest.student.size", "N/A")

            # Handle None acceptance rate
            if acceptance_rate is not None:
                acceptance_rate = f"{acceptance_rate * 100:.2f}%"
            else:
                acceptance_rate = "N/A"

            # Display formatted information
            print(f"- {name}")
            print(f"   Location: {location}")
            print(f"   Acceptance Rate: {acceptance_rate}")
            print(f"   Cost (Out-of-State): ${cost:,} (if available)")
            print(f"   Student Body Size: {size}\n")

def main():
    print("Welcome to the Grad School Comparison Program!")
    comparison_index = []

    while True:
        print("\nMenu:")
        print("1. Search for a university")
        print("2. View comparison index")
        print("3. Exit")
        choice = input("Choose an option: ").strip()

        if choice == "1":
            name = input("Enter the university name (or part of it): ").strip()
            schools = fetch_school_details(name)
            display_schools(schools)

            if schools:
                selection = input("Enter the number of the university to add to the comparison index (or 'q' to cancel): ").strip()
                if selection.isdigit() and 1 <= int(selection) <= len(schools):
                    add_to_comparison(comparison_index, schools[int(selection) - 1])
                elif selection.lower() != 'q':
                    print("Invalid selection.")
        
        elif choice == "2":
            display_comparison_index(comparison_index)

        elif choice == "3":
            print("Goodbye!")
            break

        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
